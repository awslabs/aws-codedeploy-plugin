<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
  <f:entry title="AWS CodeDeploy Application Name" field="applicationName">
    <f:textbox />
  </f:entry>
  <f:entry title="AWS CodeDeploy Deployment Group" field="deploymentGroupName">
    <f:textbox />
  </f:entry>
  <f:entry title="AWS CodeDeploy Deployment Config" field="deploymentConfig">
    <f:textbox />
  </f:entry>
  <f:entry title="AWS Region" field="region">
    <f:select />
  </f:entry>
  <f:entry title="S3 Bucket" field="s3bucket">
    <f:textbox />
  </f:entry>
  <f:entry title="S3 Prefix" field="s3prefix">
    <f:textbox default="" />
  </f:entry>
  <f:entry title="Subdirectory" field="subdirectory">
    <f:textbox default="" />
  </f:entry>
  <f:entry title="Include Files" field="includes">
    <f:textbox default="**" />
  </f:entry>
  <f:entry title="Exclude Files" field="excludes">
    <f:textbox default="" />
  </f:entry>
  <f:entry title="Proxy Host" field="proxyHost">
    <f:textbox default="" />
  </f:entry>
  <f:entry title="Proxy Port" field="proxyPort">
    <f:textbox default="" />
  </f:entry>
  <f:entry title="Version File" field="versionFileName">
    <f:textbox />
  </f:entry>

    <f:entry title="Appspec.yml per Deployment Group"  field="deploymentGroupAppspec">
      <f:checkbox field="deploymentGroupAppspec" checked="${instance.getDeploymentGroupAppspec}"/>
    </f:entry>

    <f:radioBlock title="Register Revision" name="deploymentMethod" value="onlyRevision" checked="${instance.getDeploymentMethod() == 'onlyRevision'}" inline="true">
      <f:description>
        Register the new revision with the specified CodeDeploy application but do not deploy it.
      </f:description>
    </f:radioBlock>

    <f:radioBlock title="Deploy Revision" name="deploymentMethod" value="deploy" checked="${instance.getDeploymentMethod() == 'deploy'}" inline="true">
      <f:description>
        Register the new revision and deploy it to the specified CodeDeploy deployment group.
      </f:description>
      <f:optionalBlock title="Wait for deployment to finish?" field="waitForCompletion" checked="${instance.getWaitForCompletion()}" inline="true">
        <f:entry title="Polling Timeout (s)" field="pollingTimeoutSec">
          <f:textbox default="300"/>
        </f:entry>
        <f:entry title="Polling Frequency (s)" field="pollingFreqSec">
          <f:textbox default="15"/>
        </f:entry>
      </f:optionalBlock>
    </f:radioBlock>

  <f:radioBlock title="Use Access/Secret keys" name="credentials" checked="${instance.getCredentials() == 'awsAccessKey'}" inline="true" value="awsAccessKey">
    <f:description>
      If these keys are left blank, the plugin will attempt to use credentials from the default provider chain. That
      is: Environment Variables, Java System properties, credentials profile file, and finally, EC2 Instance profile.
    </f:description>
    <f:entry title="AWS Access Key" field="awsAccessKey">
      <f:textbox />
    </f:entry>
    <f:entry title="AWS Secret Key" field="awsSecretKey">
      <f:password />
    </f:entry>
  </f:radioBlock>

  <f:radioBlock title="Use temporary credentials" name="credentials" checked="${instance.getCredentials() == 'iamRoleArn'}" inline="true" value="iamRoleArn">
    <f:entry title="IAM Role ARN" field="iamRoleArn">
      <f:textbox />
    </f:entry>
    <f:description>
      This plugin uses temporary access keys via the AWS Security Token Service. For instructions on setting this up,
      see the help text on the "IAM Role ARN" field above.<br/><br/>
      AWS Account ID: <strong>${descriptor.accountId}</strong><br/>
      External ID: <strong>${descriptor.externalId}</strong>
    </f:description>
    <f:validateButton title="${%Test Connection}" progress="${%Testing...}" method="testConnection" with="s3bucket,applicationName,region,iamRoleArn" />
  </f:radioBlock>
</j:jelly>
